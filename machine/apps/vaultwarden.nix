{config, lib, pkgs, ...}:
let
  fqdn = "vault.systemlos.org";
  port = 11001;
in {

  sops.secrets."noreplyPassword/vaultwarden" = {
    key = "noreplyPassword";
  };

  sops.secrets."services/vaultwarden/adminToken" = {};
  sops.secrets."services/vaultwarden/bwInstallId" = {};
  sops.secrets."services/vaultwarden/bwInstallKey" = {};

  users.users.vaultwarden = {
    isSystemUser = true;
    linger = true;
    group = "vaultwarden";
  };

  users.groups.vaultwarden = {};

  virtualisation.oci-containers.containers.vaultwarden = {
    image = "vaultwarden/server:latest";
    user = "${config.users.users.vaultwarden.uid}:${config.users.users.vaultwarden.gid}";
    environment = {
      DOMAIN = "https://${fqdn}";
      SIGNUPS_ALLOWED = "false";
      SMTP_FROM = "readonly@systemlos.org";
      SMTP_HOST = "mail.systemlos.org";
      SMTP_USERNAME = "noreply@systemlos.org";
      SMTP_PASSWORD_FILE = "/mailPassword";
      ADMIN_TOKEN_FILE = "/adminToken";

      PUSH_ENABLED = "true";
      PUSH_INSTALLATION_ID_FILE = "/bwInstallId";
      PUSH_INSTALLATION_KEY_FILE = "/bwInstallKey";
      PUSH_RELAY_URI = "https://api.bitwarden.eu";
      PUSH_IDENTITY_URI = "https://identity.bitwarden.eu";

      DATABASE_URL= "postgresql:///vaultwarden";

      SHOW_PASSWORD_HINT = "false";
    };
    volumes = [
      "/var/lib/vaultwarden:/data:rw"
      "${config.sops.secrets."noreplyPassword/vaultwarden".path}:/mailPassword:ro"
      "${config.sops.secrets."services/vaultwarden/adminToken".path}:/adminToken:ro"
      "${config.sops.secrets."services/vaultwarden/bwInstallId".path}:/bwInstallId:ro"
      "${config.sops.secrets."services/vaultwarden/bwInstallKey".path}:/bwInstallKey:ro"
      "/run/postgresql:/run/postgresql"
    ];
    ports = [
      "${toString port}:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=vaultwarden"
      "--network=vaultwarden_default"
    ];
  };

    services.postgresql.ensureUsers = lib.singleton {
    name = "vaultwarden";
    ensureDBOwnership = true;
  };
  services.postgresql.ensureDatabases = ["vaultwarden"];

  systemd.services.podman-vaultwarden = {
    preStart = ''
      mkdir -p /var/lib/vaultwarden
    '';
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-vaultwarden_default.service"
    ];
    requires = [
      "podman-network-vaultwarden_default.service"
    ];
    partOf = [
      "podman-vaultwarden-root.target"
    ];
    wantedBy = [
      "podman-vaultwarden-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-vaultwarden_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f vaultwarden_default";
    };
    script = ''
      podman network inspect vaultwarden_default || podman network create vaultwarden_default
    '';
    partOf = [ "podman-vaultwarden-root.target" ];
    wantedBy = [ "podman-vaultwarden-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-vaultwarden-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

  services.nginx.virtualHosts."${fqdn}" = {
    forceSSL = true;
    enableACME = true;
    locations."/" = {
      proxyPass = "http://127.0.0.1:${toString port}";
      proxyWebsockets = true;
      recommendedProxySettings = true;
    };
  };
}
