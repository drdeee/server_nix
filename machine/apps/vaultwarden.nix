let
  fqdn = "vault.systemlos.org";
  port = 11001;
in {
  virtualisation.oci-containers.containers.vaultwarden = {
    image = "vaultwarden/server:latest";
    environment = {
      "DOMAIN" = "https://${fqdn}";
      "SIGNUPS_ALLOWED" = false;
    };
    volumes = [
      "/var/lib/vaultwarden:/data:rw"
    ];
    ports = [
      "${toString port}:80/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=vaultwarden"
      "--network=vaultwarden_default"
    ];
  };

  systemd.services.podman-vaultwarden = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-vaultwarden_default.service"
    ];
    requires = [
      "podman-network-vaultwarden_default.service"
    ];
    partOf = [
      "podman-vaultwarden-root.target"
    ];
    wantedBy = [
      "podman-vaultwarden-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-vaultwarden_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f vaultwarden_default";
    };
    script = ''
      podman network inspect vaultwarden_default || podman network create vaultwarden_default
    '';
    partOf = [ "podman-vaultwarden-root.target" ];
    wantedBy = [ "podman-vaultwarden-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-vaultwarden-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

  services.nginx.virtualHosts."${fqdn}" = {
    forceSSL = true;
    enableACME = true;
    locations."/" = {
      proxyPass = "http://127.0.0.1:${toString port}";
      proxyWebsockets = true;
      recommendedProxySettings = true;
    };
  };
}
